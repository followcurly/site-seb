---
import { fetchSubstackFeed, formatDateRelative } from "@/lib/fetchSubstackFeed";
import { SITE } from "@/config";

let posts = [];
let error = null;

try {
  // Convert Substack URL to RSS feed URL
  const substackUrl = SITE.substackUrl;
  const rssUrl = substackUrl.replace(/\/$/, '') + '/feed';
  posts = await fetchSubstackFeed(rssUrl);
} catch (e) {
  console.error('Error fetching Substack feed:', e);
  error = e.message;
}
---

<!-- Desktop Layout -->
<main class="flex-1 p-8 desktop-feed">
  <div class="max-w-4xl mx-auto">
    <!-- Header Section -->
    <header class="section-spacing text-center">
      <h1 class="typewriter-title mb-4">
        <span id="latest-annotation">Latest</span> 
        <span id="writing-annotation">Writing</span>
      </h1>
      <p class="typewriter-subtitle">
         <span id="chronicles-main-annotation">Long Thoughts</span>
      </p>
    </header>

    <!-- Posts Section -->
    <div class="space-y-6">
      {error ? (
        <div class="paper-card text-center">
          <div class="text-4xl mb-4">üìù</div>
          <h2 class="typewriter-subtitle mb-4">No posts available</h2>
          <p class="typewriter-body">
            Check back soon for new content, or verify the 
            <span id="rss-annotation">RSS feed URL</span> is configured correctly.
          </p>
        </div>
      ) : posts.length === 0 ? (
        <div class="paper-card text-center">
          <div class="text-4xl mb-4">‚úçÔ∏è</div>
          <h2 class="typewriter-subtitle mb-4">Loading posts...</h2>
          <p class="typewriter-body">
            Fetching the latest content from the digital atelier.
          </p>
        </div>
      ) : (
        posts.map((post, index) => (
          <article class="paper-card post-card" data-index={index}>
            <div class="space-y-3">
              <header>
                <h2 class="typewriter-subtitle leading-tight mb-2">
                  <a 
                    href={post.link} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    class="post-title-link hover:text-blue-700 transition-colors"
                  >
                    {post.title}
                  </a>
                </h2>
                <div class="flex items-center justify-between typewriter-small text-gray-600 mb-3">
                  <time>
                    {new Date(post.pubDate).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                  <div class="flex items-center space-x-4">
                    {post.readingTime && (
                      <span class="reading-time">
                        üìñ {post.readingTime} min read
                      </span>
                    )}
                    {post.wordCount && (
                      <span class="word-count">
                        ‚úçÔ∏è {post.wordCount.toLocaleString()} words
                      </span>
                    )}
                  </div>
                </div>
              </header>

              {post.excerpt && (
                <div class="typewriter-body">
                  <p class="leading-relaxed">{post.excerpt}</p>
                </div>
              )}

              {post.categories && post.categories.length > 0 && (
                <div class="flex flex-wrap gap-2 py-2">
                  {post.categories.map((category) => (
                    <span class="category-tag typewriter-small px-2 py-1 bg-gray-100 text-gray-700 rounded">
                      {category}
                    </span>
                  ))}
                </div>
              )}

              <footer class="pt-3 border-t border-gray-200">
                <div class="flex items-center justify-between">
                  <a 
                    href={post.link}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="read-more-link inline-flex items-center typewriter-body hover:text-blue-600 transition-colors"
                  >
                    <span>Continue reading</span>
                    <span class="ml-2">‚Üí</span>
                  </a>
                  <span class="typewriter-small text-gray-500">
                    {formatDateRelative(post.pubDate)}
                  </span>
                </div>
              </footer>
            </div>
          </article>
        ))
      )}
    </div>
  </div>
</main>

<!-- Mobile Expandable Layout -->
<div class="mobile-feed fixed left-0 right-0 z-40" style="max-height: 60vh; bottom: 0;">
  <!-- Drag Handle -->
  <div class="drag-handle bg-white border-t border-l border-r border-gray-300 rounded-t-xl mx-3 shadow-lg">
    <div class="flex items-center justify-center py-4 cursor-grab active:cursor-grabbing">
      <div class="flex items-center space-x-3">
        <div class="drag-icon transition-transform duration-200">
          <svg class="w-4 h-4 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 12L3 5h14l-7 7z"/>
          </svg>
        </div>
        <div class="text-center">
          <div class="typewriter-body font-medium text-gray-800 select-none">Latest Writing</div>
          <div class="typewriter-small text-gray-500 mt-0.5">Long Thoughts ‚Ä¢ Tap to expand</div>
        </div>
        <div class="drag-icon transition-transform duration-200">
          <svg class="w-4 h-4 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 12L3 5h14l-7 7z"/>
          </svg>
        </div>
      </div>
    </div>
  </div>

  <!-- Expandable Content -->
  <div class="expandable-content bg-white border-l border-r border-gray-300 mx-3 overflow-hidden shadow-lg">
    <div class="content-inner h-80 overflow-y-auto">
      <!-- Posts Section with improved layout -->
      <div class="p-4 space-y-4">
        {error ? (
          <div class="text-center py-8">
            <div class="text-3xl mb-3">üìù</div>
            <h2 class="typewriter-body font-medium mb-2 text-gray-800">No posts available</h2>
            <p class="typewriter-small text-gray-600">
              Check back soon for new content.
            </p>
          </div>
        ) : posts.length === 0 ? (
          <div class="text-center py-8">
            <div class="text-3xl mb-3">‚úçÔ∏è</div>
            <h2 class="typewriter-body font-medium mb-2 text-gray-800">Loading posts...</h2>
            <p class="typewriter-small text-gray-600">
              Fetching the latest content.
            </p>
          </div>
        ) : (
          posts.map((post, index) => (
            <article class="bg-gray-50 border border-gray-200 rounded-lg p-4 hover:bg-gray-100 transition-colors duration-200" data-index={index}>
              <div class="space-y-3">
                <header>
                  <h2 class="typewriter-body font-medium leading-tight mb-2">
                    <a 
                      href={post.link} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      class="text-blue-600 hover:text-blue-800 transition-colors duration-200 line-clamp-2"
                    >
                      {post.title}
                    </a>
                  </h2>
                  <div class="flex items-center justify-between typewriter-small text-gray-500 mb-2">
                    <time class="flex items-center">
                      <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
                      </svg>
                      {new Date(post.pubDate).toLocaleDateString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        year: '2-digit'
                      })}
                    </time>
                    {post.readingTime && (
                      <span class="flex items-center bg-blue-100 text-blue-700 px-2 py-1 rounded-full">
                        <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                        {post.readingTime}min
                      </span>
                    )}
                  </div>
                </header>

                {post.excerpt && (
                  <div class="typewriter-small">
                    <p class="leading-relaxed text-gray-700 line-clamp-3">{post.excerpt}</p>
                  </div>
                )}

                <footer class="pt-2 border-t border-gray-200">
                  <a 
                    href={post.link}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-flex items-center typewriter-small font-medium text-blue-600 hover:text-blue-800 transition-colors duration-200"
                  >
                    <span>Continue reading</span>
                    <svg class="w-3 h-3 ml-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"/>
                    </svg>
                  </a>
                </footer>
              </div>
            </article>
          ))
        )}
      </div>
    </div>
  </div>
</div>

<style>
  /* Hide mobile on desktop */
  .mobile-feed {
    display: none;
  }

  /* Hide desktop on mobile */
  @media (max-width: 1023px) {
    .desktop-feed {
      display: none;
    }
    
    .mobile-feed {
      display: block;
    }
  }

  /* Mobile expandable styles */
  .mobile-feed {
    transform: translateY(0);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .mobile-feed.expanded {
    transform: translateY(0) !important;
  }

  .drag-handle {
    transition: all 0.2s ease;
    backdrop-filter: blur(8px);
  }

  .drag-handle:hover {
    background-color: #f9fafb;
  }

  .drag-handle:active {
    background-color: #f3f4f6;
    transform: scale(0.98);
  }

  .drag-icon {
    transition: transform 0.2s ease;
  }

  .mobile-feed.expanded .drag-icon {
    transform: rotate(180deg);
  }

  .expandable-content {
    transition: max-height 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    max-height: 0;
    backdrop-filter: blur(8px);
  }

  .mobile-feed.expanded .expandable-content {
    max-height: 20rem; /* 320px - sized to not cover profile */
  }

  .content-inner {
    scrollbar-width: thin;
    scrollbar-color: #d1d5db #f9fafb;
  }

  .content-inner::-webkit-scrollbar {
    width: 4px;
  }

  .content-inner::-webkit-scrollbar-track {
    background: #f9fafb;
    border-radius: 2px;
  }

  .content-inner::-webkit-scrollbar-thumb {
    background: #d1d5db;
    border-radius: 2px;
  }

  .content-inner::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
  }

  /* Line clamp utilities */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Mobile article hover effects */
  .mobile-feed article:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  /* Enhanced mobile feed animations */
  .mobile-feed.expanded {
    animation: slideUpBounce 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }

  @keyframes slideUpBounce {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
    100% {
      transform: translateY(0);
    }
  }

  /* Desktop styles remain the same */
  @media (min-width: 1024px) {
    .category-tag {
      transition: all 0.2s ease;
    }
    
    .category-tag:hover {
      background-color: #e5e7eb;
      transform: translateY(-1px);
    }
    
    .reading-time, .word-count {
      background: linear-gradient(135deg, #f3f4f6, #e5e7eb);
      padding: 0.25rem 0.5rem;
      border-radius: 0.375rem;
      font-size: 0.75rem;
      border: 1px solid #d1d5db;
    }

    main {
      padding: 2rem !important;
    }
  }

  @media (max-width: 768px) {
    .flex.items-center.space-x-4 {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
    
    .flex.items-center.justify-between {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
  }
</style>

<script>
  import { annotate } from 'rough-notation';

  document.addEventListener('astro:page-load', () => {
    // Desktop hover effects
    const addHoverAnnotation = (elementId: string, type: any, color: string) => {
      const element = document.getElementById(elementId);
      if (!element) return;
      
      element.addEventListener('mouseenter', () => {
        if (!(element as any)._hoverAnnotation) {
          const annotation = annotate(element, { 
            type, 
            color,
            animationDuration: 300
          });
          annotation.show();
          (element as any)._hoverAnnotation = annotation;
        }
      });
      
      element.addEventListener('mouseleave', () => {
        const annotation = (element as any)._hoverAnnotation;
        if (annotation) {
          annotation.hide();
          (element as any)._hoverAnnotation = null;
        }
      });
    };

    // Add hover effects to header elements (desktop and mobile)
    addHoverAnnotation('latest-annotation', 'highlight', '#3b82f6');
    addHoverAnnotation('writing-annotation', 'underline', '#fbbf24');
    addHoverAnnotation('chronicles-main-annotation', 'circle', '#10b981');
    addHoverAnnotation('rss-annotation', 'box', '#ef4444');
    
    // Mobile annotations
    addHoverAnnotation('latest-annotation-mobile', 'highlight', '#3b82f6');
    addHoverAnnotation('writing-annotation-mobile', 'underline', '#fbbf24');
    addHoverAnnotation('chronicles-mobile-annotation', 'circle', '#10b981');

    // Desktop post card hover interactions
    const postCards = document.querySelectorAll('.post-card');
    postCards.forEach((card) => {
      const titleLink = card.querySelector('.post-title-link');
      const readMoreLink = card.querySelector('.read-more-link');
      
      // Add hover effect to entire card
      card.addEventListener('mouseenter', () => {
        if (!(card as any)._hoverAnnotation) {
          const cardAnnotation = annotate(card, { 
            type: 'bracket', 
            color: '#6b7280',
            animationDuration: 200,
            brackets: ['left', 'right']
          });
          cardAnnotation.show();
          (card as any)._hoverAnnotation = cardAnnotation;
        }
      });
      
      card.addEventListener('mouseleave', () => {
        const annotation = (card as any)._hoverAnnotation;
        if (annotation) {
          annotation.hide();
          (card as any)._hoverAnnotation = null;
        }
      });

      // Add hover effect to title
      titleLink?.addEventListener('mouseenter', () => {
        if (!(titleLink as any)._hoverAnnotation) {
          const titleAnnotation = annotate(titleLink, { 
            type: 'underline', 
            color: '#2563eb',
            animationDuration: 250
          });
          titleAnnotation.show();
          (titleLink as any)._hoverAnnotation = titleAnnotation;
        }
      });
      
      titleLink?.addEventListener('mouseleave', () => {
        const annotation = (titleLink as any)._hoverAnnotation;
        if (annotation) {
          annotation.hide();
          (titleLink as any)._hoverAnnotation = null;
        }
      });

      // Add hover effect to read more link
      readMoreLink?.addEventListener('mouseenter', () => {
        if (!(readMoreLink as any)._hoverAnnotation) {
          const readMoreAnnotation = annotate(readMoreLink, { 
            type: 'box', 
            color: '#10b981',
            animationDuration: 200
          });
          readMoreAnnotation.show();
          (readMoreLink as any)._hoverAnnotation = readMoreAnnotation;
        }
      });
      
      readMoreLink?.addEventListener('mouseleave', () => {
        const annotation = (readMoreLink as any)._hoverAnnotation;
        if (annotation) {
          annotation.hide();
          (readMoreLink as any)._hoverAnnotation = null;
        }
      });

      // Add hover effects to category tags
      const categoryTags = card.querySelectorAll('.category-tag');
      categoryTags.forEach(tag => {
        tag.addEventListener('mouseenter', () => {
          if (!(tag as any)._hoverAnnotation) {
            const tagAnnotation = annotate(tag, { 
              type: 'circle', 
              color: '#8b5cf6',
              animationDuration: 150
            });
            tagAnnotation.show();
            (tag as any)._hoverAnnotation = tagAnnotation;
          }
        });
        
        tag.addEventListener('mouseleave', () => {
          const annotation = (tag as any)._hoverAnnotation;
          if (annotation) {
            annotation.hide();
            (tag as any)._hoverAnnotation = null;
          }
        });
      });
    });

    // Mobile expandable functionality
    const mobileFeed = document.querySelector('.mobile-feed') as HTMLElement;
    const dragHandle = document.querySelector('.drag-handle') as HTMLElement;
    
         if (mobileFeed && dragHandle) {
       let isExpanded = false;
       let isDragging = false;
       let startY = 0;

      // Toggle expand/collapse on tap
      const toggleExpanded = () => {
        isExpanded = !isExpanded;
        mobileFeed.classList.toggle('expanded', isExpanded);
        
        // No need to change transform for expand/collapse
        // Just use CSS classes for the animation
      };

      // Touch events for dragging
      const handleTouchStart = (e: TouchEvent) => {
        isDragging = true;
        startY = e.touches[0].clientY;
        dragHandle.style.cursor = 'grabbing';
        mobileFeed.classList.add('dragging');
      };

      const handleTouchMove = (e: TouchEvent) => {
        if (!isDragging) return;
        
        e.preventDefault();
        const deltaY = e.touches[0].clientY - startY;
        
        // Simple threshold-based toggle instead of continuous transform
        if (Math.abs(deltaY) > 50) { // 50px threshold
          const shouldExpand = deltaY < 0; // Dragging up = expand
          
          if (shouldExpand !== isExpanded) {
            isExpanded = shouldExpand;
            mobileFeed.classList.toggle('expanded', isExpanded);
          }
        }
      };

      const handleTouchEnd = () => {
        if (!isDragging) return;
        
        isDragging = false;
        dragHandle.style.cursor = 'grab';
        mobileFeed.classList.remove('dragging');
        // State is already set in handleTouchMove, no need to change it here
      };

      // Mouse events for desktop testing
      const handleMouseDown = (e: MouseEvent) => {
        isDragging = true;
        startY = e.clientY;
        dragHandle.style.cursor = 'grabbing';
        mobileFeed.classList.add('dragging');
      };

      const handleMouseMove = (e: MouseEvent) => {
        if (!isDragging) return;
        
        e.preventDefault();
        const deltaY = e.clientY - startY;
        
        // Same simple threshold logic as touch
        if (Math.abs(deltaY) > 50) {
          const shouldExpand = deltaY < 0;
          
          if (shouldExpand !== isExpanded) {
            isExpanded = shouldExpand;
            mobileFeed.classList.toggle('expanded', isExpanded);
          }
        }
      };

      const handleMouseUp = () => {
        if (!isDragging) return;
        
        isDragging = false;
        dragHandle.style.cursor = 'grab';
        mobileFeed.classList.remove('dragging');
      };

      // Add event listeners
      dragHandle.addEventListener('click', toggleExpanded);
      
      // Touch events
      dragHandle.addEventListener('touchstart', handleTouchStart, { passive: false });
      document.addEventListener('touchmove', handleTouchMove, { passive: false });
      document.addEventListener('touchend', handleTouchEnd);
      
      // Mouse events (for desktop testing)
      dragHandle.addEventListener('mousedown', handleMouseDown);
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }
  });
</script> 